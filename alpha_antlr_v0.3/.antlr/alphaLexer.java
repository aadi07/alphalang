// Generated from /Users/aadi/projects/alpha_lang/alpha_antlr_v0.3/alpha.g4 by ANTLR 4.8
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class alphaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, MATH=8, BOOL=9, 
		INTEGER=10, FLOAT=11, STRING=12, STRING_FACTOR=13, STRING_LITERAL=14, 
		BOOL_LITERAL=15, AND=16, OR=17, ADD=18, SUBTRACT=19, MULTIPLY=20, DIVIDE=21, 
		POWER=22, WS=23;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "MATH", "BOOL", 
			"INTEGER", "FLOAT", "STRING", "STRING_FACTOR", "STRING_LITERAL", "BOOL_LITERAL", 
			"AND", "OR", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "POWER", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'.'", "'Print '", "'If '", "':'", "','", "'otherwise if '", "'otherwise:'", 
			null, null, null, null, null, null, null, null, "' and '", "' or '"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, "MATH", "BOOL", "INTEGER", 
			"FLOAT", "STRING", "STRING_FACTOR", "STRING_LITERAL", "BOOL_LITERAL", 
			"AND", "OR", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "POWER", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public alphaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "alpha.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\31\u019e\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\3\2"+
		"\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\5\t^\n\t\3\t\3\t\3\t\3\t\3\t\5\te\n\t"+
		"\3\t\3\t\5\ti\n\t\7\tk\n\t\f\t\16\tn\13\t\3\n\3\n\3\n\5\ns\n\n\3\n\3\n"+
		"\7\nw\n\n\f\n\16\nz\13\n\3\13\6\13}\n\13\r\13\16\13~\3\f\7\f\u0082\n\f"+
		"\f\f\16\f\u0085\13\f\3\f\3\f\6\f\u0089\n\f\r\f\16\f\u008a\3\r\3\r\3\r"+
		"\3\r\7\r\u0091\n\r\f\r\16\r\u0094\13\r\3\16\3\16\3\16\3\16\5\16\u009a"+
		"\n\16\3\16\3\16\3\16\3\16\3\16\5\16\u00a1\n\16\3\17\3\17\6\17\u00a5\n"+
		"\17\r\17\16\17\u00a6\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00af\n\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u00d9\n\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0152\n\20\3\20\3\20\5\20\u0156"+
		"\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u016c\n\23\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0178\n\24\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\5\25\u0184\n\25\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\5\26\u018d\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\5\27\u0199\n\27\3\30\3\30\3\30\3\30\2\2\31\3\3\5\4\7\5\t\6\13\7\r\b\17"+
		"\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+"+
		"\27-\30/\31\3\2\5\3\2\62;\3\2$$\5\2\13\f\17\17\"\"\2\u01bc\2\3\3\2\2\2"+
		"\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2"+
		"\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2"+
		"\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2"+
		"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\3\61\3\2\2"+
		"\2\5\63\3\2\2\2\7:\3\2\2\2\t>\3\2\2\2\13@\3\2\2\2\rB\3\2\2\2\17P\3\2\2"+
		"\2\21]\3\2\2\2\23o\3\2\2\2\25|\3\2\2\2\27\u0083\3\2\2\2\31\u008c\3\2\2"+
		"\2\33\u00a0\3\2\2\2\35\u00a2\3\2\2\2\37\u00ae\3\2\2\2!\u0157\3\2\2\2#"+
		"\u015d\3\2\2\2%\u016b\3\2\2\2\'\u0177\3\2\2\2)\u0183\3\2\2\2+\u018c\3"+
		"\2\2\2-\u0198\3\2\2\2/\u019a\3\2\2\2\61\62\7\60\2\2\62\4\3\2\2\2\63\64"+
		"\7R\2\2\64\65\7t\2\2\65\66\7k\2\2\66\67\7p\2\2\678\7v\2\289\7\"\2\29\6"+
		"\3\2\2\2:;\7K\2\2;<\7h\2\2<=\7\"\2\2=\b\3\2\2\2>?\7<\2\2?\n\3\2\2\2@A"+
		"\7.\2\2A\f\3\2\2\2BC\7q\2\2CD\7v\2\2DE\7j\2\2EF\7g\2\2FG\7t\2\2GH\7y\2"+
		"\2HI\7k\2\2IJ\7u\2\2JK\7g\2\2KL\7\"\2\2LM\7k\2\2MN\7h\2\2NO\7\"\2\2O\16"+
		"\3\2\2\2PQ\7q\2\2QR\7v\2\2RS\7j\2\2ST\7g\2\2TU\7t\2\2UV\7y\2\2VW\7k\2"+
		"\2WX\7u\2\2XY\7g\2\2YZ\7<\2\2Z\20\3\2\2\2[^\5\25\13\2\\^\5\27\f\2][\3"+
		"\2\2\2]\\\3\2\2\2^l\3\2\2\2_e\5%\23\2`e\5\'\24\2ae\5)\25\2be\5+\26\2c"+
		"e\5-\27\2d_\3\2\2\2d`\3\2\2\2da\3\2\2\2db\3\2\2\2dc\3\2\2\2eh\3\2\2\2"+
		"fi\5\25\13\2gi\5\27\f\2hf\3\2\2\2hg\3\2\2\2ik\3\2\2\2jd\3\2\2\2kn\3\2"+
		"\2\2lj\3\2\2\2lm\3\2\2\2m\22\3\2\2\2nl\3\2\2\2ox\5\37\20\2ps\5!\21\2q"+
		"s\5#\22\2rp\3\2\2\2rq\3\2\2\2st\3\2\2\2tu\5\37\20\2uw\3\2\2\2vr\3\2\2"+
		"\2wz\3\2\2\2xv\3\2\2\2xy\3\2\2\2y\24\3\2\2\2zx\3\2\2\2{}\t\2\2\2|{\3\2"+
		"\2\2}~\3\2\2\2~|\3\2\2\2~\177\3\2\2\2\177\26\3\2\2\2\u0080\u0082\t\2\2"+
		"\2\u0081\u0080\3\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084"+
		"\3\2\2\2\u0084\u0086\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u0088\7\60\2\2"+
		"\u0087\u0089\t\2\2\2\u0088\u0087\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u0088"+
		"\3\2\2\2\u008a\u008b\3\2\2\2\u008b\30\3\2\2\2\u008c\u0092\5\33\16\2\u008d"+
		"\u008e\5%\23\2\u008e\u008f\5\33\16\2\u008f\u0091\3\2\2\2\u0090\u008d\3"+
		"\2\2\2\u0091\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2\u0093"+
		"\32\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u0099\5\35\17\2\u0096\u0097\5)\25"+
		"\2\u0097\u0098\5\21\t\2\u0098\u009a\3\2\2\2\u0099\u0096\3\2\2\2\u0099"+
		"\u009a\3\2\2\2\u009a\u00a1\3\2\2\2\u009b\u009c\5\21\t\2\u009c\u009d\5"+
		")\25\2\u009d\u009e\3\2\2\2\u009e\u009f\5\35\17\2\u009f\u00a1\3\2\2\2\u00a0"+
		"\u0095\3\2\2\2\u00a0\u009b\3\2\2\2\u00a1\34\3\2\2\2\u00a2\u00a4\7$\2\2"+
		"\u00a3\u00a5\n\3\2\2\u00a4\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a4"+
		"\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\7$\2\2\u00a9"+
		"\36\3\2\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad\7v\2\2\u00ad"+
		"\u00af\7\"\2\2\u00ae\u00aa\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u0155\3\2"+
		"\2\2\u00b0\u00b1\7v\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3\7w\2\2\u00b3\u0156"+
		"\7g\2\2\u00b4\u00b5\7h\2\2\u00b5\u00b6\7c\2\2\u00b6\u00b7\7n\2\2\u00b7"+
		"\u00b8\7u\2\2\u00b8\u0156\7g\2\2\u00b9\u00d8\5\31\r\2\u00ba\u00bb\7\""+
		"\2\2\u00bb\u00bc\7k\2\2\u00bc\u00bd\7u\2\2\u00bd\u00be\7\"\2\2\u00be\u00bf"+
		"\7g\2\2\u00bf\u00c0\7s\2\2\u00c0\u00c1\7w\2\2\u00c1\u00c2\7c\2\2\u00c2"+
		"\u00c3\7n\2\2\u00c3\u00c4\7\"\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6\7q\2"+
		"\2\u00c6\u00d9\7\"\2\2\u00c7\u00c8\7\"\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca"+
		"\7u\2\2\u00ca\u00cb\7\"\2\2\u00cb\u00cc\7p\2\2\u00cc\u00cd\7q\2\2\u00cd"+
		"\u00ce\7v\2\2\u00ce\u00cf\7\"\2\2\u00cf\u00d0\7g\2\2\u00d0\u00d1\7s\2"+
		"\2\u00d1\u00d2\7w\2\2\u00d2\u00d3\7c\2\2\u00d3\u00d4\7n\2\2\u00d4\u00d5"+
		"\7\"\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7\7q\2\2\u00d7\u00d9\7\"\2\2\u00d8"+
		"\u00ba\3\2\2\2\u00d8\u00c7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00db\5\31"+
		"\r\2\u00db\u0156\3\2\2\2\u00dc\u0151\5\21\t\2\u00dd\u00de\7\"\2\2\u00de"+
		"\u00df\7k\2\2\u00df\u00e0\7u\2\2\u00e0\u00e1\7\"\2\2\u00e1\u00e2\7g\2"+
		"\2\u00e2\u00e3\7s\2\2\u00e3\u00e4\7w\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6"+
		"\7n\2\2\u00e6\u00e7\7\"\2\2\u00e7\u00e8\7v\2\2\u00e8\u00e9\7q\2\2\u00e9"+
		"\u0152\7\"\2\2\u00ea\u00eb\7\"\2\2\u00eb\u00ec\7k\2\2\u00ec\u00ed\7u\2"+
		"\2\u00ed\u00ee\7\"\2\2\u00ee\u00ef\7p\2\2\u00ef\u00f0\7q\2\2\u00f0\u00f1"+
		"\7v\2\2\u00f1\u00f2\7\"\2\2\u00f2\u00f3\7g\2\2\u00f3\u00f4\7s\2\2\u00f4"+
		"\u00f5\7w\2\2\u00f5\u00f6\7c\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8\7\"\2"+
		"\2\u00f8\u00f9\7v\2\2\u00f9\u00fa\7q\2\2\u00fa\u0152\7\"\2\2\u00fb\u00fc"+
		"\7\"\2\2\u00fc\u00fd\7k\2\2\u00fd\u00fe\7u\2\2\u00fe\u00ff\7\"\2\2\u00ff"+
		"\u0100\7n\2\2\u0100\u0101\7g\2\2\u0101\u0102\7u\2\2\u0102\u0103\7u\2\2"+
		"\u0103\u0104\7\"\2\2\u0104\u0105\7v\2\2\u0105\u0106\7j\2\2\u0106\u0107"+
		"\7c\2\2\u0107\u0108\7p\2\2\u0108\u0152\7\"\2\2\u0109\u010a\7\"\2\2\u010a"+
		"\u010b\7k\2\2\u010b\u010c\7u\2\2\u010c\u010d\7\"\2\2\u010d\u010e\7i\2"+
		"\2\u010e\u010f\7t\2\2\u010f\u0110\7g\2\2\u0110\u0111\7c\2\2\u0111\u0112"+
		"\7v\2\2\u0112\u0113\7g\2\2\u0113\u0114\7t\2\2\u0114\u0115\7\"\2\2\u0115"+
		"\u0116\7v\2\2\u0116\u0117\7j\2\2\u0117\u0118\7c\2\2\u0118\u0119\7p\2\2"+
		"\u0119\u0152\7\"\2\2\u011a\u011b\7\"\2\2\u011b\u011c\7k\2\2\u011c\u011d"+
		"\7u\2\2\u011d\u011e\7\"\2\2\u011e\u011f\7i\2\2\u011f\u0120\7t\2\2\u0120"+
		"\u0121\7g\2\2\u0121\u0122\7c\2\2\u0122\u0123\7v\2\2\u0123\u0124\7g\2\2"+
		"\u0124\u0125\7t\2\2\u0125\u0126\7\"\2\2\u0126\u0127\7v\2\2\u0127\u0128"+
		"\7j\2\2\u0128\u0129\7c\2\2\u0129\u012a\7p\2\2\u012a\u012b\7\"\2\2\u012b"+
		"\u012c\7q\2\2\u012c\u012d\7t\2\2\u012d\u012e\7\"\2\2\u012e\u012f\7g\2"+
		"\2\u012f\u0130\7s\2\2\u0130\u0131\7w\2\2\u0131\u0132\7c\2\2\u0132\u0133"+
		"\7n\2\2\u0133\u0134\7\"\2\2\u0134\u0135\7v\2\2\u0135\u0136\7q\2\2\u0136"+
		"\u0152\7\"\2\2\u0137\u0138\7\"\2\2\u0138\u0139\7k\2\2\u0139\u013a\7u\2"+
		"\2\u013a\u013b\7\"\2\2\u013b\u013c\7n\2\2\u013c\u013d\7g\2\2\u013d\u013e"+
		"\7u\2\2\u013e\u013f\7u\2\2\u013f\u0140\7\"\2\2\u0140\u0141\7v\2\2\u0141"+
		"\u0142\7j\2\2\u0142\u0143\7c\2\2\u0143\u0144\7p\2\2\u0144\u0145\7\"\2"+
		"\2\u0145\u0146\7q\2\2\u0146\u0147\7t\2\2\u0147\u0148\7\"\2\2\u0148\u0149"+
		"\7g\2\2\u0149\u014a\7s\2\2\u014a\u014b\7w\2\2\u014b\u014c\7c\2\2\u014c"+
		"\u014d\7n\2\2\u014d\u014e\7\"\2\2\u014e\u014f\7v\2\2\u014f\u0150\7q\2"+
		"\2\u0150\u0152\7\"\2\2\u0151\u00dd\3\2\2\2\u0151\u00ea\3\2\2\2\u0151\u00fb"+
		"\3\2\2\2\u0151\u0109\3\2\2\2\u0151\u011a\3\2\2\2\u0151\u0137\3\2\2\2\u0152"+
		"\u0153\3\2\2\2\u0153\u0154\5\21\t\2\u0154\u0156\3\2\2\2\u0155\u00b0\3"+
		"\2\2\2\u0155\u00b4\3\2\2\2\u0155\u00b9\3\2\2\2\u0155\u00dc\3\2\2\2\u0156"+
		" \3\2\2\2\u0157\u0158\7\"\2\2\u0158\u0159\7c\2\2\u0159\u015a\7p\2\2\u015a"+
		"\u015b\7f\2\2\u015b\u015c\7\"\2\2\u015c\"\3\2\2\2\u015d\u015e\7\"\2\2"+
		"\u015e\u015f\7q\2\2\u015f\u0160\7t\2\2\u0160\u0161\7\"\2\2\u0161$\3\2"+
		"\2\2\u0162\u0163\7\"\2\2\u0163\u0164\7-\2\2\u0164\u016c\7\"\2\2\u0165"+
		"\u0166\7\"\2\2\u0166\u0167\7r\2\2\u0167\u0168\7n\2\2\u0168\u0169\7w\2"+
		"\2\u0169\u016a\7u\2\2\u016a\u016c\7\"\2\2\u016b\u0162\3\2\2\2\u016b\u0165"+
		"\3\2\2\2\u016c&\3\2\2\2\u016d\u016e\7\"\2\2\u016e\u016f\7/\2\2\u016f\u0178"+
		"\7\"\2\2\u0170\u0171\7\"\2\2\u0171\u0172\7o\2\2\u0172\u0173\7k\2\2\u0173"+
		"\u0174\7p\2\2\u0174\u0175\7w\2\2\u0175\u0176\7u\2\2\u0176\u0178\7\"\2"+
		"\2\u0177\u016d\3\2\2\2\u0177\u0170\3\2\2\2\u0178(\3\2\2\2\u0179\u017a"+
		"\7\"\2\2\u017a\u017b\7,\2\2\u017b\u0184\7\"\2\2\u017c\u017d\7\"\2\2\u017d"+
		"\u017e\7v\2\2\u017e\u017f\7k\2\2\u017f\u0180\7o\2\2\u0180\u0181\7g\2\2"+
		"\u0181\u0182\7u\2\2\u0182\u0184\7\"\2\2\u0183\u0179\3\2\2\2\u0183\u017c"+
		"\3\2\2\2\u0184*\3\2\2\2\u0185\u0186\7\"\2\2\u0186\u0187\7\61\2\2\u0187"+
		"\u018d\7\"\2\2\u0188\u0189\7\"\2\2\u0189\u018a\7d\2\2\u018a\u018b\7{\2"+
		"\2\u018b\u018d\7\"\2\2\u018c\u0185\3\2\2\2\u018c\u0188\3\2\2\2\u018d,"+
		"\3\2\2\2\u018e\u018f\7\"\2\2\u018f\u0190\7`\2\2\u0190\u0199\7\"\2\2\u0191"+
		"\u0192\7\"\2\2\u0192\u0193\7t\2\2\u0193\u0194\7c\2\2\u0194\u0195\7k\2"+
		"\2\u0195\u0196\7u\2\2\u0196\u0197\7g\2\2\u0197\u0199\7\"\2\2\u0198\u018e"+
		"\3\2\2\2\u0198\u0191\3\2\2\2\u0199.\3\2\2\2\u019a\u019b\t\4\2\2\u019b"+
		"\u019c\3\2\2\2\u019c\u019d\b\30\2\2\u019d\60\3\2\2\2\31\2]dhlrx~\u0083"+
		"\u008a\u0092\u0099\u00a0\u00a6\u00ae\u00d8\u0151\u0155\u016b\u0177\u0183"+
		"\u018c\u0198\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}